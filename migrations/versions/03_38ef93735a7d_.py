# coding=utf-8
"""增加用户相关的列表值选项和管理员用户、角色的种子数据

Revision ID: 38ef93735a7d
Revises: 4fc66ef91a3a
Create Date: 2015-07-31 10:26:37.979994

"""

# revision identifiers, used by Alembic.
from flask.ext.security.utils import encrypt_password

revision = '38ef93735a7d'
down_revision = '4fc66ef91a3a'

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    enum_values_table = table('enum_values',
                              sa.Column('id', sa.Integer(), autoincrement=True,
                                        nullable=False),
                              sa.Column('type_id', sa.Integer(), nullable=True),
                              sa.Column('code', sa.String(length=32),
                                        nullable=True),
                              sa.Column('display', sa.String(length=64),
                                        nullable=False),
                              )
    op.bulk_insert(enum_values_table, [
        {'id': 1, 'type_id': None, 'code': 'BASIC_ENUM_TYPES',
         'display': u'基本枚举类型'},
        {'id': 2, 'type_id': 1, 'code': 'USER_TYPE', 'display': u'用户类型'},
        {'id': 3, 'type_id': 2, 'code': 'NORMAL_USER', 'display': u'普通用户'},
        {'id': 4, 'type_id': 2, 'code': 'ADMIN_USER', 'display': u'管理用户'},
        {'id': 5, 'type_id': 2, 'code': 'PHOTOGRAPHER_USER',
         'display': u'摄影师用户'},
        {'id': 6, 'type_id': 1, 'code': 'USER_STATUS', 'display': u'用户状态'},
        {'id': 7, 'type_id': 6, 'code': 'VERIFIED', 'display': u'已确认'},
        {'id': 8, 'type_id': 6, 'code': 'UN_VERIFIED', 'display': u'未确认'},
    ], multiinsert=False)

    users_table = table('users',
                        sa.Column('id', sa.Integer(), autoincrement=True,
                                  nullable=False),
                        sa.Column('login', sa.String(length=64), nullable=False,
                                  unique=True),
                        sa.Column('display', sa.String(length=255),
                                  nullable=False),
                        sa.Column('email', sa.String(length=255),
                                  nullable=True),
                        sa.Column('password', sa.String(length=255),
                                  nullable=True),
                        sa.Column('active', sa.Boolean(), nullable=True),
                        sa.Column('type_id', sa.Integer(), nullable=True),
                        sa.Column('confirmed_at', sa.DateTime, nullable=True),
                        )

    op.bulk_insert(users_table, [{
        'id': 1, 'login': 'admin', 'display': 'Administrator',
        'email': 'lawrence@betterlife.io', 'type_id': 2,
        'password': encrypt_password('password'), 'active': True,
        'confirmed_at': sa.func.current_timestamp(),
    }], multiinsert=False)

    role_table = table('role',
                       sa.Column('id', sa.Integer(), autoincrement=True,
                                 nullable=False),
                       sa.Column('name', sa.String(length=80), nullable=True),
                       sa.Column('description', sa.String(length=255),
                                 nullable=True),
                       )
    op.bulk_insert(role_table, [{
        'id': 1, 'name': 'admin', 'description': 'admin role'
    }], multiinsert=False)

    roles_users_table = table('roles_users',
                              sa.Column('id', sa.Integer(), autoincrement=True,
                                        nullable=False),
                              sa.Column('user_id', sa.Integer(), nullable=True),
                              sa.Column('role_id', sa.Integer(), nullable=True),
                              )
    op.bulk_insert(roles_users_table, [{
        'id': 1, 'user_id': 1, 'role_id': 1
    }], multiinsert=False)


def downgrade():
    pass
